# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  default:
    docker:
      - image: cimg/ruby:3.1.1

commands:
  configure_bundler:
    description: Configure bundler
    steps:
      - run:
          name: Configure bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    executor: default
    steps:
      - checkout
      - restore_cache:
          keys:
            - testrubocopci-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
            - testrubocopci-
      - configure_bundler
      - run:
          name: Install bundle
          command: bundle install
      - save_cache:
          key: testrubocopci-{{ .Branch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - persist_to_workspace:
          root: ~/
          paths:
            - ./

  bundle_dependencies:
    executor:
      name: default
    steps:
      - restore_cache:
          key: v1 -dependencies-{{ checksum "Gemfile.lock" }}
      - configure_bundler
      - run:
          name: Bundle Install Dependencies
          command: |
            bundle install
      - save_cache:
          key: v1 -dependencies-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

  rubocop:
    executor: default
    steps:
      - attach_workspace:
          at: ~/
      - configure_bundler
      - run:
          name: Rubocop
          command: bundle exec rubocop

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  version: 2
  integration:
    jobs:
      - build
      - bundle_dependencies:
          requires:
            - build
      - rubocop:
          requires:
            - bundle_dependencies
